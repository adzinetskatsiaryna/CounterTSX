{"version":3,"sources":["Display.tsx","Button.tsx","Input.tsx","Counter1.tsx","Counter2.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","props","errorStyle","maxValue","counter","errorForMinValue","errorForMaxValue","className","minValue","onSet","Button","onClick","disabled","title","Input","type","value","onChange","onFocus","Counter1","useState","setCounter","setMaxValue","setMinValue","setOnset","disabledReset","disabledAdd","errorInput","e","newMaxValue","Number","currentTarget","newMinValue","Counter2","onSow","setOnShow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPA6BeA,MAjBf,SAAiBC,GAEb,IAAIC,EAAaD,EAAME,WAAaF,EAAMG,SAAWH,EAAMI,kBAAoBJ,EAAMK,iBAAmB,QAAU,GAEpH,OACE,yBAAKC,UAAU,WACX,0BAAMA,UAAWL,GAEZD,EAAMO,SAAW,GAAKP,EAAMO,UAAYP,EAAME,UAAYF,EAAME,SAAU,GAAKF,EAAME,UAAUF,EAAMO,SAClG,oDAAoCP,EAAMQ,MACN,8BAAOR,EAAMG,SAArD,8DCNGM,MAPf,SAAgBT,GAEd,OACC,4BAAQU,QAASV,EAAMU,QAASC,SAAUX,EAAMW,UAAWX,EAAMY,QCgBrDC,MAjBf,SAAgBb,GAEZ,OACI,yBAAKM,UAAU,gBACX,8BAAON,EAAMY,OACb,2BACIE,KAAK,SACLC,MAAOf,EAAMe,MACbC,SAAUhB,EAAMgB,SAChBC,QAASjB,EAAMgB,SACfV,UAAWN,EAAMM,cCyDlBY,MAxEf,WAAqB,IAAD,EAESC,mBAAS,GAFlB,mBAEZhB,EAFY,KAEHiB,EAFG,OAGWD,mBAAS,GAHpB,mBAGZjB,EAHY,KAGFmB,EAHE,OAIWF,mBAAS,GAJpB,mBAIZZ,EAJY,KAIFe,EAJE,OAKKH,oBAAS,GALd,mBAKZX,EALY,KAKLe,EALK,KAmCZC,EAAgBrB,IAAYI,IAAsB,IAAVC,EACxCiB,EAActB,IAAYD,IAAsB,IAAVM,EAGtCH,EAAmBH,EAAW,GAAKA,GAAYK,EAC/CH,EAAmBG,EAAW,GAAKA,GAAYL,EAC/CwB,EAAcrB,GAAoBD,EAAoB,aAAe,GAE3E,OACI,yBAAKE,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAOS,MAAOb,EAAUc,SA7BpB,SAACW,GAChB,IAAIC,EAAaC,OAAOF,EAAEG,cAAcf,OACvCM,EAAYO,GACZL,GAAS,IA0BkDX,MAAM,YAAYN,UAAWoB,IAC9E,kBAAC,EAAD,CAAOX,MAAOR,EAAUS,SAxBpB,SAACW,GACf,IAAII,EAAYF,OAAOF,EAAEG,cAAcf,OACvCO,EAAYS,GACZR,GAAS,IAqBkDX,MAAM,YAAYN,UAAWoB,KAElF,kBAAC,EAAD,CAAQhB,QApBC,WACfU,EAAWb,GACXgB,GAAS,IAkB4BX,MAAM,MAC7BD,UAAoB,IAAVH,GAAkBJ,GAAoBC,KAE5D,yBAAKC,UAAU,WACX,kBAAC,EAAD,CACIH,QAASA,EACTD,SAAUA,EACVK,SAAUA,EACVF,iBAAkBA,EAClBD,iBAAkBA,EAClBI,MAAOA,IAEX,yBAAKF,UAAU,WACX,kBAAC,EAAD,CAAQI,QAxDL,WAEVP,EAAQD,GACRkB,EAFcjB,EAAQ,IAuDcS,MAAM,MAAMD,SAAUc,IACnD,kBAAC,EAAD,CAAQf,QAlDH,WACfU,EAAWb,IAiD8BK,MAAM,QAAQD,SAAUa,QCiB1DQ,MAjFf,WAAqB,IAAD,EAESb,mBAAS,GAFlB,mBAEZhB,EAFY,KAEHiB,EAFG,OAGWD,mBAAS,GAHpB,mBAGZjB,EAHY,KAGFmB,EAHE,OAIWF,mBAAS,GAJpB,mBAIZZ,EAJY,KAIFe,EAJE,OAKKH,oBAAS,GALd,mBAKZX,EALY,KAKLe,EALK,OAMMJ,oBAAS,GANf,mBAMZc,EANY,KAMLC,EANK,KAyCZV,EAAgBrB,IAAYI,IAAsB,IAAVC,EACxCiB,EAActB,IAAYD,IAAsB,IAAVM,EAGtCH,EAAmBH,EAAW,GAAKA,GAAYK,EAC/CH,EAAmBG,EAAW,GAAKA,GAAYL,EAC/CwB,EAAcrB,GAAoBD,EAAoB,aAAe,GAE3E,OACI,yBAAKE,UAAU,QACF,IAAR2B,GAAiB,yBAAK3B,UAAU,YAC7B,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAOS,MAAOb,EAAUc,SAlCpB,SAACW,GAChB,IAAIC,EAAaC,OAAOF,EAAEG,cAAcf,OACvCM,EAAYO,GACZL,GAAS,IA+BkDX,MAAM,YAAYN,UAAWoB,IAC9E,kBAAC,EAAD,CAAOX,MAAOR,EAAUS,SA7BpB,SAACW,GACf,IAAII,EAAYF,OAAOF,EAAEG,cAAcf,OACvCO,EAAYS,GACZR,GAAS,IA0BkDX,MAAM,YAAYN,UAAWoB,KAElF,kBAAC,EAAD,CAAQhB,QAzBC,WACfU,EAAWb,GACXgB,GAAS,GACTW,GAAU,IAsB2BtB,MAAM,MAC7BD,SAAUN,GAAkBD,MAE/B,IAAR6B,GAAgB,yBAAK3B,UAAU,WAC5B,kBAAC,EAAD,CACIH,QAASA,EACTD,SAAUA,EACVK,SAAUA,EACVF,iBAAkBA,EAClBD,iBAAkBA,EAClBI,MAAOA,IAEX,yBAAKF,UAAU,WACX,kBAAC,EAAD,CAAQI,QA7DL,WAEVP,EAAUD,GACVkB,EAFcjB,EAAQ,IA4DcS,MAAM,MAAMD,SAAUc,IACnD,kBAAC,EAAD,CAAQf,QAvDH,WACfU,EAAWb,IAsD8BK,MAAM,QAAQD,SAAUa,IACvD,kBAAC,EAAD,CACId,QAnCE,WAChBwB,GAAU,IAmCItB,MAAM,MACND,UAAU,QC9DjBwB,MAZf,WAEE,OAEI,yBAAK7B,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13ddf6e1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ntype PropsType = {\n    counter: number\n    maxValue: number\n    minValue: number\n    errorForMaxValue: boolean\n    errorForMinValue: boolean\n    onSet: boolean\n}\n\nfunction Display(props:PropsType) {\n\n    let errorStyle = props.maxValue === props.counter || props.errorForMinValue || props.errorForMaxValue ? 'error' : \"\";\n\n  return (\n    <div className=\"display\">\n        <span className={errorStyle}>\n\n            {props.minValue < 0 || props.minValue >= props.maxValue || props.maxValue< 0 || props.maxValue<=props.minValue ?\n                <span>incorrect value!!!</span> : (!props.onSet) ?\n            <span>Enter value end press set</span>: <span>{props.counter}</span> }\n\n      </span>\n    </div>\n  );\n}\n\nexport default Display;\n","import React from 'react';\nimport './App.css';\ntype PropsType = {\n onClick:()=> void\n  title: string\n  disabled: boolean\n}\n\n\nfunction Button(props:PropsType) {\n\n  return (\n   <button onClick={props.onClick} disabled={props.disabled}>{props.title}</button>\n  );\n}\n\nexport default Button;","import React, {ChangeEvent} from 'react';\nimport './App.css';\ntype PropsType = {\n  value:number\n  onChange:(e:ChangeEvent<HTMLInputElement>)=> void\n  title: string\n    className: any\n\n}\n\n\nfunction Input (props:PropsType) {\n\n    return (\n        <div className='inputSetting'>\n            <span>{props.title}</span>\n            <input\n                type='number'\n                value={props.value}\n                onChange={props.onChange}\n                onFocus={props.onChange}\n                className={props.className}\n\n            />\n        </div>\n    );\n}\n\nexport default Input;","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport Display from \"./Display\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nfunction Counter1() {\n\n    let[counter, setCounter]=useState(0);\n    let[maxValue, setMaxValue]=useState(5);\n    let[minValue, setMinValue]=useState(0);\n    let[onSet, setOnset]=useState(false);\n\n    let addCounter = ()=>{\n        let newCounter = counter+1;\n        if(counter<maxValue){\n           setCounter(newCounter)\n        }\n    };\n\n    let resetCounter = ()=>{\n        setCounter(minValue)\n    };\n\n    let onSetMaxValue=(e:ChangeEvent<HTMLInputElement>)=>{\n       let newMaxValue= Number(e.currentTarget.value);\n        setMaxValue(newMaxValue);\n        setOnset(false)\n    };\n\n    let onSetMinValue=(e:ChangeEvent<HTMLInputElement>)=>{\n        let newMinValue=Number(e.currentTarget.value);\n        setMinValue(newMinValue);\n        setOnset(false)\n    };\n\n    let onSetChanged = ()=>{\n        setCounter(minValue);\n        setOnset(true)\n    };\n\n    let disabledReset = counter === minValue || onSet === false;\n    let disabledAdd = counter === maxValue || onSet === false;\n\n\n    let errorForMaxValue = maxValue < 0 || maxValue <= minValue;\n    let errorForMinValue = minValue < 0 || minValue >= maxValue;\n    let errorInput = (errorForMaxValue || errorForMinValue) ? 'errorInput' : '';\n\n  return (\n      <div className=\"App\">\n          <div className='settings'>\n              <div className='inputSettings'>\n                  <Input value={maxValue} onChange={onSetMaxValue} title='Max Value' className={errorInput}/>\n                  <Input value={minValue} onChange={onSetMinValue} title='Min Value' className={errorInput}/>\n              </div>\n              <Button onClick={onSetChanged} title=\"SET\"\n                      disabled={onSet === true || errorForMinValue || errorForMaxValue}/>\n          </div>\n          <div className='counter'>\n              <Display\n                  counter={counter}\n                  maxValue={maxValue}\n                  minValue={minValue}\n                  errorForMaxValue={errorForMaxValue}\n                  errorForMinValue={errorForMinValue}\n                  onSet={onSet}\n              />\n              <div className='buttons'>\n                  <Button onClick={addCounter} title='ADD' disabled={disabledAdd}/>\n                  <Button onClick={resetCounter} title='RESET' disabled={disabledReset}/>\n\n              </div>\n          </div>\n      </div>\n  );\n}\n\nexport default Counter1;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport Display from \"./Display\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nfunction Counter2() {\n\n    let[counter, setCounter]=useState(0);\n    let[maxValue, setMaxValue]=useState(5);\n    let[minValue, setMinValue]=useState(0);\n    let[onSet, setOnset]=useState(false);\n    let[onSow, setOnShow]=useState(false);\n\n    let addCounter = ()=>{\n        let newCounter = counter+1;\n        if(counter < maxValue){\n           setCounter(newCounter)\n        }\n    };\n\n    let resetCounter = ()=>{\n        setCounter(minValue)\n    };\n\n    let onSetMaxValue=(e:ChangeEvent<HTMLInputElement>)=>{\n       let newMaxValue= Number(e.currentTarget.value);\n        setMaxValue(newMaxValue);\n        setOnset(false)\n    };\n\n    let onSetMinValue=(e:ChangeEvent<HTMLInputElement>)=>{\n        let newMinValue=Number(e.currentTarget.value);\n        setMinValue(newMinValue);\n        setOnset(false)\n    };\n\n    let onSetChanged = ()=>{\n        setCounter(minValue);\n        setOnset(true)\n        setOnShow(true)\n    };\n\n    let onSowSettings = ()=>{\n        setOnShow(false)\n    };\n\n    let disabledReset = counter === minValue || onSet === false;\n    let disabledAdd = counter === maxValue || onSet === false;\n\n\n    let errorForMaxValue = maxValue < 0 || maxValue <= minValue;\n    let errorForMinValue = minValue < 0 || minValue >= maxValue;\n    let errorInput = (errorForMaxValue || errorForMinValue) ? 'errorInput' : '';\n\n  return (\n      <div className=\"App\">\n          {onSow===false && <div className='settings'>\n              <div className='inputSettings'>\n                  <Input value={maxValue} onChange={onSetMaxValue} title='Max Value' className={errorInput}/>\n                  <Input value={minValue} onChange={onSetMinValue} title='Min Value' className={errorInput}/>\n              </div>\n              <Button onClick={onSetChanged} title=\"SET\"\n                      disabled={errorForMaxValue||errorForMinValue}/>\n          </div>}\n          {onSow===true && <div className='counter'>\n              <Display\n                  counter={counter}\n                  maxValue={maxValue}\n                  minValue={minValue}\n                  errorForMaxValue={errorForMaxValue}\n                  errorForMinValue={errorForMinValue}\n                  onSet={onSet}\n              />\n              <div className='buttons'>\n                  <Button onClick={addCounter} title='ADD' disabled={disabledAdd}/>\n                  <Button onClick={resetCounter} title='RESET' disabled={disabledReset}/>\n                  <Button\n                      onClick={onSowSettings}\n                      title=\"SET\"\n                      disabled={false}/>\n              </div>\n          </div>}\n      </div>\n  );\n}\n\nexport default Counter2;\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\n\nimport Counter1 from \"./Counter1\";\nimport Counter2 from \"./Counter2\";\n\nfunction App() {\n\n  return (\n\n      <div className='walpapper'>\n          <Counter1/>\n          <Counter2/>\n      </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}